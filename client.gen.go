// Package brec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package brec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AllowedAddressFamily.
const (
	AllowedAddressFamilyMinus1 AllowedAddressFamily = -1
	AllowedAddressFamilyN0     AllowedAddressFamily = 0
	AllowedAddressFamilyN1     AllowedAddressFamily = 1
	AllowedAddressFamilyN2     AllowedAddressFamily = 2
)

// Defines values for CuttingMode.
const (
	CuttingModeN0 CuttingMode = 0
	CuttingModeN1 CuttingMode = 1
	CuttingModeN2 CuttingMode = 2
)

// Defines values for DanmakuTransportMode.
const (
	DanmakuTransportModeN0 DanmakuTransportMode = 0
	DanmakuTransportModeN1 DanmakuTransportMode = 1
	DanmakuTransportModeN2 DanmakuTransportMode = 2
	DanmakuTransportModeN3 DanmakuTransportMode = 3
)

// Defines values for FileNameTemplateStatus.
const (
	FileNameTemplateStatusN0 FileNameTemplateStatus = 0
	FileNameTemplateStatusN1 FileNameTemplateStatus = 1
	FileNameTemplateStatusN2 FileNameTemplateStatus = 2
	FileNameTemplateStatusN3 FileNameTemplateStatus = 3
)

// Defines values for RecordMode.
const (
	N0 RecordMode = 0
	N1 RecordMode = 1
)

// Defines values for RestApiErrorCode.
const (
	Minus1 RestApiErrorCode = -1
	Minus2 RestApiErrorCode = -2
	Minus3 RestApiErrorCode = -3
	Minus4 RestApiErrorCode = -4
)

// AllowedAddressFamily defines model for AllowedAddressFamily.
type AllowedAddressFamily int32

// AllowedAddressFamilyOptional defines model for AllowedAddressFamilyOptional.
type AllowedAddressFamilyOptional struct {
	HasValue *bool                 `json:"hasValue,omitempty"`
	Value    *AllowedAddressFamily `json:"value,omitempty"`
}

// BooleanOptional defines model for BooleanOptional.
type BooleanOptional struct {
	HasValue *bool `json:"hasValue,omitempty"`
	Value    *bool `json:"value,omitempty"`
}

// CreateRoomDto defines model for CreateRoomDto.
type CreateRoomDto struct {
	AutoRecord *bool  `json:"autoRecord,omitempty"`
	RoomId     *int32 `json:"roomId,omitempty"`
}

// CuttingMode defines model for CuttingMode.
type CuttingMode int32

// CuttingModeOptional defines model for CuttingModeOptional.
type CuttingModeOptional struct {
	HasValue *bool        `json:"hasValue,omitempty"`
	Value    *CuttingMode `json:"value,omitempty"`
}

// DanmakuTransportMode defines model for DanmakuTransportMode.
type DanmakuTransportMode int32

// DanmakuTransportModeOptional defines model for DanmakuTransportModeOptional.
type DanmakuTransportModeOptional struct {
	HasValue *bool                 `json:"hasValue,omitempty"`
	Value    *DanmakuTransportMode `json:"value,omitempty"`
}

// DefaultConfig defines model for DefaultConfig.
type DefaultConfig struct {
	Cookie                               *string               `json:"cookie"`
	CuttingByTitle                       *bool                 `json:"cuttingByTitle,omitempty"`
	CuttingMode                          *CuttingMode          `json:"cuttingMode,omitempty"`
	CuttingNumber                        *int32                `json:"cuttingNumber,omitempty"`
	DanmakuAuthenticateWithStreamerUid   *bool                 `json:"danmakuAuthenticateWithStreamerUid,omitempty"`
	DanmakuTransport                     *DanmakuTransportMode `json:"danmakuTransport,omitempty"`
	FileNameRecordTemplate               *string               `json:"fileNameRecordTemplate"`
	FlvProcessorSplitOnScriptTag         *bool                 `json:"flvProcessorSplitOnScriptTag,omitempty"`
	FlvWriteMetadata                     *bool                 `json:"flvWriteMetadata,omitempty"`
	LiveApiHost                          *string               `json:"liveApiHost"`
	NetworkTransportAllowedAddressFamily *AllowedAddressFamily `json:"networkTransportAllowedAddressFamily,omitempty"`
	NetworkTransportUseSystemProxy       *bool                 `json:"networkTransportUseSystemProxy,omitempty"`
	RecordDanmaku                        *bool                 `json:"recordDanmaku,omitempty"`
	RecordDanmakuFlushInterval           *int32                `json:"recordDanmakuFlushInterval,omitempty"`
	RecordDanmakuGift                    *bool                 `json:"recordDanmakuGift,omitempty"`
	RecordDanmakuGuard                   *bool                 `json:"recordDanmakuGuard,omitempty"`
	RecordDanmakuRaw                     *bool                 `json:"recordDanmakuRaw,omitempty"`
	RecordDanmakuSuperChat               *bool                 `json:"recordDanmakuSuperChat,omitempty"`
	RecordMode                           *RecordMode           `json:"recordMode,omitempty"`
	RecordingQuality                     *string               `json:"recordingQuality"`
	SaveStreamCover                      *bool                 `json:"saveStreamCover,omitempty"`
	TimingApiTimeout                     *int32                `json:"timingApiTimeout,omitempty"`
	TimingCheckInterval                  *int32                `json:"timingCheckInterval,omitempty"`
	TimingDanmakuRetry                   *int32                `json:"timingDanmakuRetry,omitempty"`
	TimingStreamConnect                  *int32                `json:"timingStreamConnect,omitempty"`
	TimingStreamRetry                    *int32                `json:"timingStreamRetry,omitempty"`
	TimingStreamRetryNoQn                *int32                `json:"timingStreamRetryNoQn,omitempty"`
	TimingWatchdogTimeout                *int32                `json:"timingWatchdogTimeout,omitempty"`
	UserScript                           *string               `json:"userScript"`
	WebHookUrls                          *string               `json:"webHookUrls"`
	WebHookUrlsV2                        *string               `json:"webHookUrlsV2"`
	WpfNotifyStreamStart                 *bool                 `json:"wpfNotifyStreamStart,omitempty"`
	WpfShowTitleAndArea                  *bool                 `json:"wpfShowTitleAndArea,omitempty"`
}

// FileApiResult defines model for FileApiResult.
type FileApiResult struct {
	Exist *bool                       `json:"exist,omitempty"`
	Files *[]FileApiResult_Files_Item `json:"files"`
	Path  *string                     `json:"path"`
}

// FileApiResult_Files_Item defines model for FileApiResult.files.Item.
type FileApiResult_Files_Item struct {
	union json.RawMessage
}

// FileDto defines model for FileDto.
type FileDto = FileLikeDto

// FileLikeDto defines model for FileLikeDto.
type FileLikeDto struct {
	IsFolder     *bool      `json:"isFolder,omitempty"`
	LastModified *time.Time `json:"lastModified,omitempty"`
	Name         *string    `json:"name"`
}

// FileNameTemplateContextDto defines model for FileNameTemplateContextDto.
type FileNameTemplateContextDto struct {
	AreaChild  *string `json:"areaChild"`
	AreaParent *string `json:"areaParent"`
	Json       *string `json:"json"`
	Name       *string `json:"name"`
	PartIndex  *int32  `json:"partIndex,omitempty"`
	Qn         *int32  `json:"qn,omitempty"`
	RoomId     *int32  `json:"roomId,omitempty"`
	ShortId    *int32  `json:"shortId,omitempty"`
	Title      *string `json:"title"`
	Uid        *int64  `json:"uid,omitempty"`
}

// FileNameTemplateOutput defines model for FileNameTemplateOutput.
type FileNameTemplateOutput struct {
	ErrorMessage *string                 `json:"errorMessage"`
	FullPath     *string                 `json:"fullPath"`
	RelativePath *string                 `json:"relativePath"`
	Status       *FileNameTemplateStatus `json:"status,omitempty"`
}

// FileNameTemplateStatus defines model for FileNameTemplateStatus.
type FileNameTemplateStatus int32

// FolderDto defines model for FolderDto.
type FolderDto = FileLikeDto

// GenerateFileNameInput defines model for GenerateFileNameInput.
type GenerateFileNameInput struct {
	Context *FileNameTemplateContextDto `json:"context,omitempty"`

	// Template 文件名模板
	Template *string `json:"template"`
}

// GlobalConfigDto defines model for GlobalConfigDto.
type GlobalConfigDto struct {
	OptionalCookie                               *StringOptional               `json:"optionalCookie,omitempty"`
	OptionalCuttingByTitle                       *BooleanOptional              `json:"optionalCuttingByTitle,omitempty"`
	OptionalCuttingMode                          *CuttingModeOptional          `json:"optionalCuttingMode,omitempty"`
	OptionalCuttingNumber                        *UInt32Optional               `json:"optionalCuttingNumber,omitempty"`
	OptionalDanmakuAuthenticateWithStreamerUid   *BooleanOptional              `json:"optionalDanmakuAuthenticateWithStreamerUid,omitempty"`
	OptionalDanmakuTransport                     *DanmakuTransportModeOptional `json:"optionalDanmakuTransport,omitempty"`
	OptionalFileNameRecordTemplate               *StringOptional               `json:"optionalFileNameRecordTemplate,omitempty"`
	OptionalFlvProcessorSplitOnScriptTag         *BooleanOptional              `json:"optionalFlvProcessorSplitOnScriptTag,omitempty"`
	OptionalFlvWriteMetadata                     *BooleanOptional              `json:"optionalFlvWriteMetadata,omitempty"`
	OptionalLiveApiHost                          *StringOptional               `json:"optionalLiveApiHost,omitempty"`
	OptionalNetworkTransportAllowedAddressFamily *AllowedAddressFamilyOptional `json:"optionalNetworkTransportAllowedAddressFamily,omitempty"`
	OptionalNetworkTransportUseSystemProxy       *BooleanOptional              `json:"optionalNetworkTransportUseSystemProxy,omitempty"`
	OptionalRecordDanmaku                        *BooleanOptional              `json:"optionalRecordDanmaku,omitempty"`
	OptionalRecordDanmakuFlushInterval           *UInt32Optional               `json:"optionalRecordDanmakuFlushInterval,omitempty"`
	OptionalRecordDanmakuGift                    *BooleanOptional              `json:"optionalRecordDanmakuGift,omitempty"`
	OptionalRecordDanmakuGuard                   *BooleanOptional              `json:"optionalRecordDanmakuGuard,omitempty"`
	OptionalRecordDanmakuRaw                     *BooleanOptional              `json:"optionalRecordDanmakuRaw,omitempty"`
	OptionalRecordDanmakuSuperChat               *BooleanOptional              `json:"optionalRecordDanmakuSuperChat,omitempty"`
	OptionalRecordMode                           *RecordModeOptional           `json:"optionalRecordMode,omitempty"`
	OptionalRecordingQuality                     *StringOptional               `json:"optionalRecordingQuality,omitempty"`
	OptionalSaveStreamCover                      *BooleanOptional              `json:"optionalSaveStreamCover,omitempty"`
	OptionalTimingApiTimeout                     *UInt32Optional               `json:"optionalTimingApiTimeout,omitempty"`
	OptionalTimingCheckInterval                  *UInt32Optional               `json:"optionalTimingCheckInterval,omitempty"`
	OptionalTimingDanmakuRetry                   *UInt32Optional               `json:"optionalTimingDanmakuRetry,omitempty"`
	OptionalTimingStreamConnect                  *UInt32Optional               `json:"optionalTimingStreamConnect,omitempty"`
	OptionalTimingStreamRetry                    *UInt32Optional               `json:"optionalTimingStreamRetry,omitempty"`
	OptionalTimingStreamRetryNoQn                *UInt32Optional               `json:"optionalTimingStreamRetryNoQn,omitempty"`
	OptionalTimingWatchdogTimeout                *UInt32Optional               `json:"optionalTimingWatchdogTimeout,omitempty"`
	OptionalUserScript                           *StringOptional               `json:"optionalUserScript,omitempty"`
	OptionalWebHookUrls                          *StringOptional               `json:"optionalWebHookUrls,omitempty"`
	OptionalWebHookUrlsV2                        *StringOptional               `json:"optionalWebHookUrlsV2,omitempty"`
	OptionalWpfNotifyStreamStart                 *BooleanOptional              `json:"optionalWpfNotifyStreamStart,omitempty"`
	OptionalWpfShowTitleAndArea                  *BooleanOptional              `json:"optionalWpfShowTitleAndArea,omitempty"`
}

// JsonLogDto defines model for JsonLogDto.
type JsonLogDto struct {
	Continuous *bool     `json:"continuous,omitempty"`
	Cursor     *int64    `json:"cursor,omitempty"`
	Logs       *[]string `json:"logs"`
}

// RecordMode defines model for RecordMode.
type RecordMode int32

// RecordModeOptional defines model for RecordModeOptional.
type RecordModeOptional struct {
	HasValue *bool       `json:"hasValue,omitempty"`
	Value    *RecordMode `json:"value,omitempty"`
}

// RecorderVersion defines model for RecorderVersion.
type RecorderVersion struct {
	AssemblySemFileVer              *string `json:"assemblySemFileVer"`
	AssemblySemVer                  *string `json:"assemblySemVer"`
	BranchName                      *string `json:"branchName"`
	BuildMetaData                   *string `json:"buildMetaData"`
	BuildMetaDataPadded             *string `json:"buildMetaDataPadded"`
	CommitDate                      *string `json:"commitDate"`
	CommitsSinceVersionSource       *string `json:"commitsSinceVersionSource"`
	CommitsSinceVersionSourcePadded *string `json:"commitsSinceVersionSourcePadded"`
	EscapedBranchName               *string `json:"escapedBranchName"`
	FullBuildMetaData               *string `json:"fullBuildMetaData"`
	FullSemVer                      *string `json:"fullSemVer"`
	InformationalVersion            *string `json:"informationalVersion"`
	LegacySemVer                    *string `json:"legacySemVer"`
	LegacySemVerPadded              *string `json:"legacySemVerPadded"`
	Major                           *string `json:"major"`
	MajorMinorPatch                 *string `json:"majorMinorPatch"`
	Minor                           *string `json:"minor"`
	NuGetPreReleaseTag              *string `json:"nuGetPreReleaseTag"`
	NuGetPreReleaseTagV2            *string `json:"nuGetPreReleaseTagV2"`
	NuGetVersion                    *string `json:"nuGetVersion"`
	NuGetVersionV2                  *string `json:"nuGetVersionV2"`
	Patch                           *string `json:"patch"`
	PreReleaseLabel                 *string `json:"preReleaseLabel"`
	PreReleaseLabelWithDash         *string `json:"preReleaseLabelWithDash"`
	PreReleaseNumber                *string `json:"preReleaseNumber"`
	PreReleaseTag                   *string `json:"preReleaseTag"`
	PreReleaseTagWithDash           *string `json:"preReleaseTagWithDash"`
	SemVer                          *string `json:"semVer"`
	Sha                             *string `json:"sha"`
	ShortSha                        *string `json:"shortSha"`
	UncommittedChanges              *string `json:"uncommittedChanges"`
	VersionSourceSha                *string `json:"versionSourceSha"`
	WeightedPreReleaseNumber        *string `json:"weightedPreReleaseNumber"`
}

// RestApiError defines model for RestApiError.
type RestApiError struct {
	Code    *RestApiErrorCode `json:"code,omitempty"`
	Message *string           `json:"message"`
}

// RestApiErrorCode defines model for RestApiErrorCode.
type RestApiErrorCode int32

// RoomConfigDto defines model for RoomConfigDto.
type RoomConfigDto struct {
	AutoRecord                           *bool                `json:"autoRecord,omitempty"`
	OptionalCuttingByTitle               *BooleanOptional     `json:"optionalCuttingByTitle,omitempty"`
	OptionalCuttingMode                  *CuttingModeOptional `json:"optionalCuttingMode,omitempty"`
	OptionalCuttingNumber                *UInt32Optional      `json:"optionalCuttingNumber,omitempty"`
	OptionalFlvProcessorSplitOnScriptTag *BooleanOptional     `json:"optionalFlvProcessorSplitOnScriptTag,omitempty"`
	OptionalRecordDanmaku                *BooleanOptional     `json:"optionalRecordDanmaku,omitempty"`
	OptionalRecordDanmakuGift            *BooleanOptional     `json:"optionalRecordDanmakuGift,omitempty"`
	OptionalRecordDanmakuGuard           *BooleanOptional     `json:"optionalRecordDanmakuGuard,omitempty"`
	OptionalRecordDanmakuRaw             *BooleanOptional     `json:"optionalRecordDanmakuRaw,omitempty"`
	OptionalRecordDanmakuSuperChat       *BooleanOptional     `json:"optionalRecordDanmakuSuperChat,omitempty"`
	OptionalRecordMode                   *RecordModeOptional  `json:"optionalRecordMode,omitempty"`
	OptionalRecordingQuality             *StringOptional      `json:"optionalRecordingQuality,omitempty"`
	OptionalSaveStreamCover              *BooleanOptional     `json:"optionalSaveStreamCover,omitempty"`
}

// RoomDto defines model for RoomDto.
type RoomDto struct {
	AreaNameChild            *string                `json:"areaNameChild"`
	AreaNameParent           *string                `json:"areaNameParent"`
	AutoRecord               *bool                  `json:"autoRecord,omitempty"`
	AutoRecordForThisSession *bool                  `json:"autoRecordForThisSession,omitempty"`
	DanmakuConnected         *bool                  `json:"danmakuConnected,omitempty"`
	IoStats                  *RoomIOStatsDto        `json:"ioStats,omitempty"`
	Name                     *string                `json:"name"`
	ObjectId                 *openapi_types.UUID    `json:"objectId,omitempty"`
	Recording                *bool                  `json:"recording,omitempty"`
	RecordingStats           *RoomRecordingStatsDto `json:"recordingStats,omitempty"`
	RoomId                   *int32                 `json:"roomId,omitempty"`
	ShortId                  *int32                 `json:"shortId,omitempty"`
	Streaming                *bool                  `json:"streaming,omitempty"`
	Title                    *string                `json:"title"`
	Uid                      *int64                 `json:"uid,omitempty"`
}

// RoomIOStatsDto defines model for RoomIOStatsDto.
type RoomIOStatsDto struct {
	// DiskBytesWritten 统计区间内写入磁盘的数据量
	DiskBytesWritten *int32 `json:"diskBytesWritten,omitempty"`

	// DiskMBps 平均写入速度，mibi-bytes per second
	DiskMBps *float64 `json:"diskMBps,omitempty"`

	// DiskWriteDuration 统计区间内的磁盘写入耗时，毫秒
	DiskWriteDuration *float64 `json:"diskWriteDuration,omitempty"`

	// Duration 当前统计区间的时长，毫秒
	Duration *float64 `json:"duration,omitempty"`

	// EndTime 当前统计区间的结束时间
	EndTime *time.Time `json:"endTime,omitempty"`

	// NetworkBytesDownloaded 下载了的数据量
	NetworkBytesDownloaded *int32 `json:"networkBytesDownloaded,omitempty"`

	// NetworkMbps 平均下载速度，mibi-bits per second
	NetworkMbps *float64 `json:"networkMbps,omitempty"`

	// StartTime 当前统计区间的开始时间
	StartTime *time.Time `json:"startTime,omitempty"`

	// StreamHost 直播服务器域名
	StreamHost *string `json:"streamHost"`
}

// RoomRecordingStatsDto defines model for RoomRecordingStatsDto.
type RoomRecordingStatsDto struct {
	// AddedDuration 当前这一个统计区间的直播数据时长，毫秒
	AddedDuration *float64 `json:"addedDuration,omitempty"`

	// CurrentFileSize 当前文件的大小
	CurrentFileSize *int64 `json:"currentFileSize,omitempty"`

	// DurationRatio 录制速度比例
	DurationRatio *float64 `json:"durationRatio,omitempty"`

	// FileMaxTimestamp 当前文件的最大时间戳（相当于总时长，毫秒）
	FileMaxTimestamp *int32 `json:"fileMaxTimestamp,omitempty"`

	// InputAudioBytes 当前统计区间新收到的音频数据大小
	InputAudioBytes *int64 `json:"inputAudioBytes,omitempty"`

	// InputVideoBytes 当前统计区间新收到的视频数据大小
	InputVideoBytes *int64 `json:"inputVideoBytes,omitempty"`

	// OutputAudioBytes 当前统计区间新写入的音频数据大小
	OutputAudioBytes *int64 `json:"outputAudioBytes,omitempty"`

	// OutputAudioFrames 当前统计区间新写入的音频帧数量
	OutputAudioFrames *int32 `json:"outputAudioFrames,omitempty"`

	// OutputVideoBytes 当前统计区间新写入的视频数据大小
	OutputVideoBytes *int64 `json:"outputVideoBytes,omitempty"`

	// OutputVideoFrames 当前统计区间新写入的视频帧数量
	OutputVideoFrames *int32 `json:"outputVideoFrames,omitempty"`

	// PassedTime 当前这一个统计区间所经过的时间长度，毫秒
	PassedTime *float64 `json:"passedTime,omitempty"`

	// SessionDuration 从录制开始到现在一共经过的时间，毫秒
	SessionDuration *float64 `json:"sessionDuration,omitempty"`

	// SessionMaxTimestamp 本次直播流收到的最大时间戳（已修复过，相当于总时长，毫秒）
	SessionMaxTimestamp *int32 `json:"sessionMaxTimestamp,omitempty"`

	// TotalInputAudioBytes 总共收到的音频数据大小
	TotalInputAudioBytes *int64 `json:"totalInputAudioBytes,omitempty"`

	// TotalInputBytes 总接受字节数
	TotalInputBytes *int64 `json:"totalInputBytes,omitempty"`

	// TotalInputVideoBytes 总共收到的视频数据大小
	TotalInputVideoBytes *int64 `json:"totalInputVideoBytes,omitempty"`

	// TotalOutputAudioBytes 总共写入的音频数据大小
	TotalOutputAudioBytes *int64 `json:"totalOutputAudioBytes,omitempty"`

	// TotalOutputAudioFrames 总共写入的音频帧数量
	TotalOutputAudioFrames *int32 `json:"totalOutputAudioFrames,omitempty"`

	// TotalOutputBytes 总写入字节数
	TotalOutputBytes *int64 `json:"totalOutputBytes,omitempty"`

	// TotalOutputVideoBytes 总共写入的视频数据大小
	TotalOutputVideoBytes *int64 `json:"totalOutputVideoBytes,omitempty"`

	// TotalOutputVideoFrames 总共写入的视频帧数量
	TotalOutputVideoFrames *int32 `json:"totalOutputVideoFrames,omitempty"`
}

// SetGlobalConfig defines model for SetGlobalConfig.
type SetGlobalConfig struct {
	OptionalCookie                               *StringOptional               `json:"optionalCookie,omitempty"`
	OptionalCuttingByTitle                       *BooleanOptional              `json:"optionalCuttingByTitle,omitempty"`
	OptionalCuttingMode                          *CuttingModeOptional          `json:"optionalCuttingMode,omitempty"`
	OptionalCuttingNumber                        *UInt32Optional               `json:"optionalCuttingNumber,omitempty"`
	OptionalDanmakuAuthenticateWithStreamerUid   *BooleanOptional              `json:"optionalDanmakuAuthenticateWithStreamerUid,omitempty"`
	OptionalDanmakuTransport                     *DanmakuTransportModeOptional `json:"optionalDanmakuTransport,omitempty"`
	OptionalFileNameRecordTemplate               *StringOptional               `json:"optionalFileNameRecordTemplate,omitempty"`
	OptionalFlvProcessorSplitOnScriptTag         *BooleanOptional              `json:"optionalFlvProcessorSplitOnScriptTag,omitempty"`
	OptionalFlvWriteMetadata                     *BooleanOptional              `json:"optionalFlvWriteMetadata,omitempty"`
	OptionalLiveApiHost                          *StringOptional               `json:"optionalLiveApiHost,omitempty"`
	OptionalNetworkTransportAllowedAddressFamily *AllowedAddressFamilyOptional `json:"optionalNetworkTransportAllowedAddressFamily,omitempty"`
	OptionalNetworkTransportUseSystemProxy       *BooleanOptional              `json:"optionalNetworkTransportUseSystemProxy,omitempty"`
	OptionalRecordDanmaku                        *BooleanOptional              `json:"optionalRecordDanmaku,omitempty"`
	OptionalRecordDanmakuFlushInterval           *UInt32Optional               `json:"optionalRecordDanmakuFlushInterval,omitempty"`
	OptionalRecordDanmakuGift                    *BooleanOptional              `json:"optionalRecordDanmakuGift,omitempty"`
	OptionalRecordDanmakuGuard                   *BooleanOptional              `json:"optionalRecordDanmakuGuard,omitempty"`
	OptionalRecordDanmakuRaw                     *BooleanOptional              `json:"optionalRecordDanmakuRaw,omitempty"`
	OptionalRecordDanmakuSuperChat               *BooleanOptional              `json:"optionalRecordDanmakuSuperChat,omitempty"`
	OptionalRecordMode                           *RecordModeOptional           `json:"optionalRecordMode,omitempty"`
	OptionalRecordingQuality                     *StringOptional               `json:"optionalRecordingQuality,omitempty"`
	OptionalSaveStreamCover                      *BooleanOptional              `json:"optionalSaveStreamCover,omitempty"`
	OptionalTimingApiTimeout                     *UInt32Optional               `json:"optionalTimingApiTimeout,omitempty"`
	OptionalTimingCheckInterval                  *UInt32Optional               `json:"optionalTimingCheckInterval,omitempty"`
	OptionalTimingDanmakuRetry                   *UInt32Optional               `json:"optionalTimingDanmakuRetry,omitempty"`
	OptionalTimingStreamConnect                  *UInt32Optional               `json:"optionalTimingStreamConnect,omitempty"`
	OptionalTimingStreamRetry                    *UInt32Optional               `json:"optionalTimingStreamRetry,omitempty"`
	OptionalTimingStreamRetryNoQn                *UInt32Optional               `json:"optionalTimingStreamRetryNoQn,omitempty"`
	OptionalTimingWatchdogTimeout                *UInt32Optional               `json:"optionalTimingWatchdogTimeout,omitempty"`
	OptionalUserScript                           *StringOptional               `json:"optionalUserScript,omitempty"`
	OptionalWebHookUrls                          *StringOptional               `json:"optionalWebHookUrls,omitempty"`
	OptionalWebHookUrlsV2                        *StringOptional               `json:"optionalWebHookUrlsV2,omitempty"`
	OptionalWpfNotifyStreamStart                 *BooleanOptional              `json:"optionalWpfNotifyStreamStart,omitempty"`
	OptionalWpfShowTitleAndArea                  *BooleanOptional              `json:"optionalWpfShowTitleAndArea,omitempty"`
}

// SetRoomConfig defines model for SetRoomConfig.
type SetRoomConfig struct {
	AutoRecord                           *bool                `json:"autoRecord"`
	OptionalCuttingByTitle               *BooleanOptional     `json:"optionalCuttingByTitle,omitempty"`
	OptionalCuttingMode                  *CuttingModeOptional `json:"optionalCuttingMode,omitempty"`
	OptionalCuttingNumber                *UInt32Optional      `json:"optionalCuttingNumber,omitempty"`
	OptionalFlvProcessorSplitOnScriptTag *BooleanOptional     `json:"optionalFlvProcessorSplitOnScriptTag,omitempty"`
	OptionalRecordDanmaku                *BooleanOptional     `json:"optionalRecordDanmaku,omitempty"`
	OptionalRecordDanmakuGift            *BooleanOptional     `json:"optionalRecordDanmakuGift,omitempty"`
	OptionalRecordDanmakuGuard           *BooleanOptional     `json:"optionalRecordDanmakuGuard,omitempty"`
	OptionalRecordDanmakuRaw             *BooleanOptional     `json:"optionalRecordDanmakuRaw,omitempty"`
	OptionalRecordDanmakuSuperChat       *BooleanOptional     `json:"optionalRecordDanmakuSuperChat,omitempty"`
	OptionalRecordMode                   *RecordModeOptional  `json:"optionalRecordMode,omitempty"`
	OptionalRecordingQuality             *StringOptional      `json:"optionalRecordingQuality,omitempty"`
	OptionalSaveStreamCover              *BooleanOptional     `json:"optionalSaveStreamCover,omitempty"`
}

// StringOptional defines model for StringOptional.
type StringOptional struct {
	HasValue *bool   `json:"hasValue,omitempty"`
	Value    *string `json:"value"`
}

// UInt32Optional defines model for UInt32Optional.
type UInt32Optional struct {
	HasValue *bool  `json:"hasValue,omitempty"`
	Value    *int32 `json:"value,omitempty"`
}

// FileGetFilesParams defines parameters for FileGetFiles.
type FileGetFilesParams struct {
	// Path 路径
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetApiLogFetchParams defines parameters for GetApiLogFetch.
type GetApiLogFetchParams struct {
	// After 只获取此 id 之后的日志
	After *int64 `form:"after,omitempty" json:"after,omitempty"`
}

// PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody defines body for PostApiConfigGlobal for application/*+json ContentType.
type PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody = SetGlobalConfig

// PostApiConfigGlobalJSONRequestBody defines body for PostApiConfigGlobal for application/json ContentType.
type PostApiConfigGlobalJSONRequestBody = SetGlobalConfig

// PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody defines body for PostApiConfigGlobal for application/json-patch+json ContentType.
type PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody = SetGlobalConfig

// PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody defines body for PostApiMiscGeneratefilename for application/*+json ContentType.
type PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody = GenerateFileNameInput

// PostApiMiscGeneratefilenameJSONRequestBody defines body for PostApiMiscGeneratefilename for application/json ContentType.
type PostApiMiscGeneratefilenameJSONRequestBody = GenerateFileNameInput

// PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody defines body for PostApiMiscGeneratefilename for application/json-patch+json ContentType.
type PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody = GenerateFileNameInput

// RoomCreateRoomApplicationWildcardPlusJSONRequestBody defines body for RoomCreateRoom for application/*+json ContentType.
type RoomCreateRoomApplicationWildcardPlusJSONRequestBody = CreateRoomDto

// RoomCreateRoomJSONRequestBody defines body for RoomCreateRoom for application/json ContentType.
type RoomCreateRoomJSONRequestBody = CreateRoomDto

// RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody defines body for RoomCreateRoom for application/json-patch+json ContentType.
type RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody = CreateRoomDto

// PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody defines body for PostApiRoomObjectIdConfig for application/*+json ContentType.
type PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody = SetRoomConfig

// PostApiRoomObjectIdConfigJSONRequestBody defines body for PostApiRoomObjectIdConfig for application/json ContentType.
type PostApiRoomObjectIdConfigJSONRequestBody = SetRoomConfig

// PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody defines body for PostApiRoomObjectIdConfig for application/json-patch+json ContentType.
type PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody = SetRoomConfig

// PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody defines body for PostApiRoomRoomIdConfig for application/*+json ContentType.
type PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody = SetRoomConfig

// PostApiRoomRoomIdConfigJSONRequestBody defines body for PostApiRoomRoomIdConfig for application/json ContentType.
type PostApiRoomRoomIdConfigJSONRequestBody = SetRoomConfig

// PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody defines body for PostApiRoomRoomIdConfig for application/json-patch+json ContentType.
type PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody = SetRoomConfig

// AsFileDto returns the union data inside the FileApiResult_Files_Item as a FileDto
func (t FileApiResult_Files_Item) AsFileDto() (FileDto, error) {
	var body FileDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileDto overwrites any union data inside the FileApiResult_Files_Item as the provided FileDto
func (t *FileApiResult_Files_Item) FromFileDto(v FileDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileDto performs a merge with any union data inside the FileApiResult_Files_Item, using the provided FileDto
func (t *FileApiResult_Files_Item) MergeFileDto(v FileDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFolderDto returns the union data inside the FileApiResult_Files_Item as a FolderDto
func (t FileApiResult_Files_Item) AsFolderDto() (FolderDto, error) {
	var body FolderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolderDto overwrites any union data inside the FileApiResult_Files_Item as the provided FolderDto
func (t *FileApiResult_Files_Item) FromFolderDto(v FolderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolderDto performs a merge with any union data inside the FileApiResult_Files_Item, using the provided FolderDto
func (t *FileApiResult_Files_Item) MergeFolderDto(v FolderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileApiResult_Files_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileApiResult_Files_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiConfigDefault request
	GetApiConfigDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiConfigGlobal request
	GetApiConfigGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiConfigGlobalWithBody request with any body
	PostApiConfigGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiConfigGlobalWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiConfigGlobal(ctx context.Context, body PostApiConfigGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiConfigGlobalWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileGetFiles request
	FileGetFiles(ctx context.Context, params *FileGetFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLogFetch request
	GetApiLogFetch(ctx context.Context, params *GetApiLogFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMiscGeneratefilenameWithBody request with any body
	PostApiMiscGeneratefilenameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMiscGeneratefilenameWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMiscGeneratefilename(ctx context.Context, body PostApiMiscGeneratefilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMiscGeneratefilenameWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoomGetRooms request
	RoomGetRooms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoomCreateRoomWithBody request with any body
	RoomCreateRoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoomCreateRoomWithApplicationWildcardPlusJSONBody(ctx context.Context, body RoomCreateRoomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoomCreateRoom(ctx context.Context, body RoomCreateRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoomCreateRoomWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRoomObjectId request
	DeleteApiRoomObjectId(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomObjectId request
	GetApiRoomObjectId(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomObjectIdConfig request
	GetApiRoomObjectIdConfig(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomObjectIdConfigWithBody request with any body
	PostApiRoomObjectIdConfigWithBody(ctx context.Context, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomObjectIdConfigWithApplicationWildcardPlusJSONBody(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomObjectIdConfig(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomObjectIdConfigWithApplicationJSONPatchPlusJSONBody(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomObjectIdIostats request
	GetApiRoomObjectIdIostats(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomObjectIdRefresh request
	PostApiRoomObjectIdRefresh(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomObjectIdSplit request
	PostApiRoomObjectIdSplit(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomObjectIdStart request
	PostApiRoomObjectIdStart(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomObjectIdStats request
	GetApiRoomObjectIdStats(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomObjectIdStop request
	PostApiRoomObjectIdStop(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRoomRoomId request
	DeleteApiRoomRoomId(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomRoomId request
	GetApiRoomRoomId(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomRoomIdConfig request
	GetApiRoomRoomIdConfig(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomRoomIdConfigWithBody request with any body
	PostApiRoomRoomIdConfigWithBody(ctx context.Context, roomId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomRoomIdConfigWithApplicationWildcardPlusJSONBody(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomRoomIdConfig(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoomRoomIdConfigWithApplicationJSONPatchPlusJSONBody(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomRoomIdIostats request
	GetApiRoomRoomIdIostats(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomRoomIdRefresh request
	PostApiRoomRoomIdRefresh(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomRoomIdSplit request
	PostApiRoomRoomIdSplit(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomRoomIdStart request
	PostApiRoomRoomIdStart(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoomRoomIdStats request
	GetApiRoomRoomIdStats(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoomRoomIdStop request
	PostApiRoomRoomIdStop(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersionGetVersion request
	VersionGetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiConfigDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiConfigDefaultRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiConfigGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiConfigGlobalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiConfigGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiConfigGlobalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiConfigGlobalWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiConfigGlobalRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiConfigGlobal(ctx context.Context, body PostApiConfigGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiConfigGlobalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiConfigGlobalWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiConfigGlobalRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileGetFiles(ctx context.Context, params *FileGetFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileGetFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLogFetch(ctx context.Context, params *GetApiLogFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLogFetchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMiscGeneratefilenameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMiscGeneratefilenameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMiscGeneratefilenameWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMiscGeneratefilenameRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMiscGeneratefilename(ctx context.Context, body PostApiMiscGeneratefilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMiscGeneratefilenameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMiscGeneratefilenameWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMiscGeneratefilenameRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoomGetRooms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoomGetRoomsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoomCreateRoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoomCreateRoomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoomCreateRoomWithApplicationWildcardPlusJSONBody(ctx context.Context, body RoomCreateRoomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoomCreateRoomRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoomCreateRoom(ctx context.Context, body RoomCreateRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoomCreateRoomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoomCreateRoomWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoomCreateRoomRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRoomObjectId(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRoomObjectIdRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomObjectId(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomObjectIdRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomObjectIdConfig(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomObjectIdConfigRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdConfigWithBody(ctx context.Context, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdConfigRequestWithBody(c.Server, objectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdConfigWithApplicationWildcardPlusJSONBody(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdConfigRequestWithApplicationWildcardPlusJSONBody(c.Server, objectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdConfig(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdConfigRequest(c.Server, objectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdConfigWithApplicationJSONPatchPlusJSONBody(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdConfigRequestWithApplicationJSONPatchPlusJSONBody(c.Server, objectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomObjectIdIostats(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomObjectIdIostatsRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdRefresh(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdRefreshRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdSplit(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdSplitRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdStart(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdStartRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomObjectIdStats(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomObjectIdStatsRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomObjectIdStop(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomObjectIdStopRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRoomRoomId(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRoomRoomIdRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomRoomId(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomRoomIdRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomRoomIdConfig(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomRoomIdConfigRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdConfigWithBody(ctx context.Context, roomId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdConfigRequestWithBody(c.Server, roomId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdConfigWithApplicationWildcardPlusJSONBody(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdConfigRequestWithApplicationWildcardPlusJSONBody(c.Server, roomId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdConfig(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdConfigRequest(c.Server, roomId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdConfigWithApplicationJSONPatchPlusJSONBody(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdConfigRequestWithApplicationJSONPatchPlusJSONBody(c.Server, roomId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomRoomIdIostats(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomRoomIdIostatsRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdRefresh(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdRefreshRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdSplit(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdSplitRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdStart(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdStartRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoomRoomIdStats(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoomRoomIdStatsRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoomRoomIdStop(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoomRoomIdStopRequest(c.Server, roomId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersionGetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiConfigDefaultRequest generates requests for GetApiConfigDefault
func NewGetApiConfigDefaultRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiConfigGlobalRequest generates requests for GetApiConfigGlobal
func NewGetApiConfigGlobalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiConfigGlobalRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiConfigGlobal builder with application/*+json body
func NewPostApiConfigGlobalRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiConfigGlobalRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiConfigGlobalRequest calls the generic PostApiConfigGlobal builder with application/json body
func NewPostApiConfigGlobalRequest(server string, body PostApiConfigGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiConfigGlobalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiConfigGlobalRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostApiConfigGlobal builder with application/json-patch+json body
func NewPostApiConfigGlobalRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiConfigGlobalRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostApiConfigGlobalRequestWithBody generates requests for PostApiConfigGlobal with any type of body
func NewPostApiConfigGlobalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFileGetFilesRequest generates requests for FileGetFiles
func NewFileGetFilesRequest(server string, params *FileGetFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiLogFetchRequest generates requests for GetApiLogFetch
func NewGetApiLogFetchRequest(server string, params *GetApiLogFetchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/log/fetch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMiscGeneratefilenameRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiMiscGeneratefilename builder with application/*+json body
func NewPostApiMiscGeneratefilenameRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMiscGeneratefilenameRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiMiscGeneratefilenameRequest calls the generic PostApiMiscGeneratefilename builder with application/json body
func NewPostApiMiscGeneratefilenameRequest(server string, body PostApiMiscGeneratefilenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMiscGeneratefilenameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiMiscGeneratefilenameRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostApiMiscGeneratefilename builder with application/json-patch+json body
func NewPostApiMiscGeneratefilenameRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMiscGeneratefilenameRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostApiMiscGeneratefilenameRequestWithBody generates requests for PostApiMiscGeneratefilename with any type of body
func NewPostApiMiscGeneratefilenameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/misc/generatefilename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRoomGetRoomsRequest generates requests for RoomGetRooms
func NewRoomGetRoomsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoomCreateRoomRequestWithApplicationWildcardPlusJSONBody calls the generic RoomCreateRoom builder with application/*+json body
func NewRoomCreateRoomRequestWithApplicationWildcardPlusJSONBody(server string, body RoomCreateRoomApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoomCreateRoomRequestWithBody(server, "application/*+json", bodyReader)
}

// NewRoomCreateRoomRequest calls the generic RoomCreateRoom builder with application/json body
func NewRoomCreateRoomRequest(server string, body RoomCreateRoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoomCreateRoomRequestWithBody(server, "application/json", bodyReader)
}

// NewRoomCreateRoomRequestWithApplicationJSONPatchPlusJSONBody calls the generic RoomCreateRoom builder with application/json-patch+json body
func NewRoomCreateRoomRequestWithApplicationJSONPatchPlusJSONBody(server string, body RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoomCreateRoomRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewRoomCreateRoomRequestWithBody generates requests for RoomCreateRoom with any type of body
func NewRoomCreateRoomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRoomObjectIdRequest generates requests for DeleteApiRoomObjectId
func NewDeleteApiRoomObjectIdRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomObjectIdRequest generates requests for GetApiRoomObjectId
func NewGetApiRoomObjectIdRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomObjectIdConfigRequest generates requests for GetApiRoomObjectIdConfig
func NewGetApiRoomObjectIdConfigRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomObjectIdConfigRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiRoomObjectIdConfig builder with application/*+json body
func NewPostApiRoomObjectIdConfigRequestWithApplicationWildcardPlusJSONBody(server string, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomObjectIdConfigRequestWithBody(server, objectId, "application/*+json", bodyReader)
}

// NewPostApiRoomObjectIdConfigRequest calls the generic PostApiRoomObjectIdConfig builder with application/json body
func NewPostApiRoomObjectIdConfigRequest(server string, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomObjectIdConfigRequestWithBody(server, objectId, "application/json", bodyReader)
}

// NewPostApiRoomObjectIdConfigRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostApiRoomObjectIdConfig builder with application/json-patch+json body
func NewPostApiRoomObjectIdConfigRequestWithApplicationJSONPatchPlusJSONBody(server string, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomObjectIdConfigRequestWithBody(server, objectId, "application/json-patch+json", bodyReader)
}

// NewPostApiRoomObjectIdConfigRequestWithBody generates requests for PostApiRoomObjectIdConfig with any type of body
func NewPostApiRoomObjectIdConfigRequestWithBody(server string, objectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRoomObjectIdIostatsRequest generates requests for GetApiRoomObjectIdIostats
func NewGetApiRoomObjectIdIostatsRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/iostats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomObjectIdRefreshRequest generates requests for PostApiRoomObjectIdRefresh
func NewPostApiRoomObjectIdRefreshRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomObjectIdSplitRequest generates requests for PostApiRoomObjectIdSplit
func NewPostApiRoomObjectIdSplitRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/split", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomObjectIdStartRequest generates requests for PostApiRoomObjectIdStart
func NewPostApiRoomObjectIdStartRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomObjectIdStatsRequest generates requests for GetApiRoomObjectIdStats
func NewGetApiRoomObjectIdStatsRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomObjectIdStopRequest generates requests for PostApiRoomObjectIdStop
func NewPostApiRoomObjectIdStopRequest(server string, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiRoomRoomIdRequest generates requests for DeleteApiRoomRoomId
func NewDeleteApiRoomRoomIdRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomRoomIdRequest generates requests for GetApiRoomRoomId
func NewGetApiRoomRoomIdRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomRoomIdConfigRequest generates requests for GetApiRoomRoomIdConfig
func NewGetApiRoomRoomIdConfigRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomRoomIdConfigRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiRoomRoomIdConfig builder with application/*+json body
func NewPostApiRoomRoomIdConfigRequestWithApplicationWildcardPlusJSONBody(server string, roomId int32, body PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomRoomIdConfigRequestWithBody(server, roomId, "application/*+json", bodyReader)
}

// NewPostApiRoomRoomIdConfigRequest calls the generic PostApiRoomRoomIdConfig builder with application/json body
func NewPostApiRoomRoomIdConfigRequest(server string, roomId int32, body PostApiRoomRoomIdConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomRoomIdConfigRequestWithBody(server, roomId, "application/json", bodyReader)
}

// NewPostApiRoomRoomIdConfigRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostApiRoomRoomIdConfig builder with application/json-patch+json body
func NewPostApiRoomRoomIdConfigRequestWithApplicationJSONPatchPlusJSONBody(server string, roomId int32, body PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoomRoomIdConfigRequestWithBody(server, roomId, "application/json-patch+json", bodyReader)
}

// NewPostApiRoomRoomIdConfigRequestWithBody generates requests for PostApiRoomRoomIdConfig with any type of body
func NewPostApiRoomRoomIdConfigRequestWithBody(server string, roomId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRoomRoomIdIostatsRequest generates requests for GetApiRoomRoomIdIostats
func NewGetApiRoomRoomIdIostatsRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/iostats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomRoomIdRefreshRequest generates requests for PostApiRoomRoomIdRefresh
func NewPostApiRoomRoomIdRefreshRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomRoomIdSplitRequest generates requests for PostApiRoomRoomIdSplit
func NewPostApiRoomRoomIdSplitRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/split", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomRoomIdStartRequest generates requests for PostApiRoomRoomIdStart
func NewPostApiRoomRoomIdStartRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoomRoomIdStatsRequest generates requests for GetApiRoomRoomIdStats
func NewGetApiRoomRoomIdStatsRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoomRoomIdStopRequest generates requests for PostApiRoomRoomIdStop
func NewPostApiRoomRoomIdStopRequest(server string, roomId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roomId", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/room/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionGetVersionRequest generates requests for VersionGetVersion
func NewVersionGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiConfigDefaultWithResponse request
	GetApiConfigDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigDefaultResponse, error)

	// GetApiConfigGlobalWithResponse request
	GetApiConfigGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigGlobalResponse, error)

	// PostApiConfigGlobalWithBodyWithResponse request with any body
	PostApiConfigGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error)

	PostApiConfigGlobalWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error)

	PostApiConfigGlobalWithResponse(ctx context.Context, body PostApiConfigGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error)

	PostApiConfigGlobalWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error)

	// FileGetFilesWithResponse request
	FileGetFilesWithResponse(ctx context.Context, params *FileGetFilesParams, reqEditors ...RequestEditorFn) (*FileGetFilesResponse, error)

	// GetApiLogFetchWithResponse request
	GetApiLogFetchWithResponse(ctx context.Context, params *GetApiLogFetchParams, reqEditors ...RequestEditorFn) (*GetApiLogFetchResponse, error)

	// PostApiMiscGeneratefilenameWithBodyWithResponse request with any body
	PostApiMiscGeneratefilenameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error)

	PostApiMiscGeneratefilenameWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error)

	PostApiMiscGeneratefilenameWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error)

	PostApiMiscGeneratefilenameWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error)

	// RoomGetRoomsWithResponse request
	RoomGetRoomsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RoomGetRoomsResponse, error)

	// RoomCreateRoomWithBodyWithResponse request with any body
	RoomCreateRoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error)

	RoomCreateRoomWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body RoomCreateRoomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error)

	RoomCreateRoomWithResponse(ctx context.Context, body RoomCreateRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error)

	RoomCreateRoomWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error)

	// DeleteApiRoomObjectIdWithResponse request
	DeleteApiRoomObjectIdWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiRoomObjectIdResponse, error)

	// GetApiRoomObjectIdWithResponse request
	GetApiRoomObjectIdWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdResponse, error)

	// GetApiRoomObjectIdConfigWithResponse request
	GetApiRoomObjectIdConfigWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdConfigResponse, error)

	// PostApiRoomObjectIdConfigWithBodyWithResponse request with any body
	PostApiRoomObjectIdConfigWithBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error)

	PostApiRoomObjectIdConfigWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error)

	PostApiRoomObjectIdConfigWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error)

	PostApiRoomObjectIdConfigWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error)

	// GetApiRoomObjectIdIostatsWithResponse request
	GetApiRoomObjectIdIostatsWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdIostatsResponse, error)

	// PostApiRoomObjectIdRefreshWithResponse request
	PostApiRoomObjectIdRefreshWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdRefreshResponse, error)

	// PostApiRoomObjectIdSplitWithResponse request
	PostApiRoomObjectIdSplitWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdSplitResponse, error)

	// PostApiRoomObjectIdStartWithResponse request
	PostApiRoomObjectIdStartWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdStartResponse, error)

	// GetApiRoomObjectIdStatsWithResponse request
	GetApiRoomObjectIdStatsWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdStatsResponse, error)

	// PostApiRoomObjectIdStopWithResponse request
	PostApiRoomObjectIdStopWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdStopResponse, error)

	// DeleteApiRoomRoomIdWithResponse request
	DeleteApiRoomRoomIdWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*DeleteApiRoomRoomIdResponse, error)

	// GetApiRoomRoomIdWithResponse request
	GetApiRoomRoomIdWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdResponse, error)

	// GetApiRoomRoomIdConfigWithResponse request
	GetApiRoomRoomIdConfigWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdConfigResponse, error)

	// PostApiRoomRoomIdConfigWithBodyWithResponse request with any body
	PostApiRoomRoomIdConfigWithBodyWithResponse(ctx context.Context, roomId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error)

	PostApiRoomRoomIdConfigWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error)

	PostApiRoomRoomIdConfigWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error)

	PostApiRoomRoomIdConfigWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error)

	// GetApiRoomRoomIdIostatsWithResponse request
	GetApiRoomRoomIdIostatsWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdIostatsResponse, error)

	// PostApiRoomRoomIdRefreshWithResponse request
	PostApiRoomRoomIdRefreshWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdRefreshResponse, error)

	// PostApiRoomRoomIdSplitWithResponse request
	PostApiRoomRoomIdSplitWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdSplitResponse, error)

	// PostApiRoomRoomIdStartWithResponse request
	PostApiRoomRoomIdStartWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdStartResponse, error)

	// GetApiRoomRoomIdStatsWithResponse request
	GetApiRoomRoomIdStatsWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdStatsResponse, error)

	// PostApiRoomRoomIdStopWithResponse request
	PostApiRoomRoomIdStopWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdStopResponse, error)

	// VersionGetVersionWithResponse request
	VersionGetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionGetVersionResponse, error)
}

type GetApiConfigDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultConfig
}

// Status returns HTTPResponse.Status
func (r GetApiConfigDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiConfigDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiConfigGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalConfigDto
}

// Status returns HTTPResponse.Status
func (r GetApiConfigGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiConfigGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiConfigGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalConfigDto
}

// Status returns HTTPResponse.Status
func (r PostApiConfigGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiConfigGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileGetFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileApiResult
}

// Status returns HTTPResponse.Status
func (r FileGetFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileGetFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLogFetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JsonLogDto
}

// Status returns HTTPResponse.Status
func (r GetApiLogFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLogFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMiscGeneratefilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileNameTemplateOutput
}

// Status returns HTTPResponse.Status
func (r PostApiMiscGeneratefilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMiscGeneratefilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoomGetRoomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoomDto
}

// Status returns HTTPResponse.Status
func (r RoomGetRoomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoomGetRoomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoomCreateRoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON400      *RestApiError
}

// Status returns HTTPResponse.Status
func (r RoomCreateRoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoomCreateRoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRoomObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r DeleteApiRoomObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRoomObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomObjectIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomConfigDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomObjectIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomObjectIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomObjectIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomConfigDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomObjectIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomObjectIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomObjectIdIostatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomIOStatsDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomObjectIdIostatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomObjectIdIostatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomObjectIdRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomObjectIdRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomObjectIdRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomObjectIdSplitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomObjectIdSplitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomObjectIdSplitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomObjectIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomObjectIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomObjectIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomObjectIdStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomRecordingStatsDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomObjectIdStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomObjectIdStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomObjectIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomObjectIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomObjectIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRoomRoomIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r DeleteApiRoomRoomIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRoomRoomIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomRoomIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomRoomIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomRoomIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomRoomIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomConfigDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomRoomIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomRoomIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomRoomIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomConfigDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomRoomIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomRoomIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomRoomIdIostatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomIOStatsDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomRoomIdIostatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomRoomIdIostatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomRoomIdRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomRoomIdRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomRoomIdRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomRoomIdSplitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomRoomIdSplitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomRoomIdSplitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomRoomIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomRoomIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomRoomIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoomRoomIdStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomRecordingStatsDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r GetApiRoomRoomIdStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoomRoomIdStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoomRoomIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoomDto
	JSON404      *RestApiError
}

// Status returns HTTPResponse.Status
func (r PostApiRoomRoomIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoomRoomIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionGetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecorderVersion
}

// Status returns HTTPResponse.Status
func (r VersionGetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionGetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiConfigDefaultWithResponse request returning *GetApiConfigDefaultResponse
func (c *ClientWithResponses) GetApiConfigDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigDefaultResponse, error) {
	rsp, err := c.GetApiConfigDefault(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiConfigDefaultResponse(rsp)
}

// GetApiConfigGlobalWithResponse request returning *GetApiConfigGlobalResponse
func (c *ClientWithResponses) GetApiConfigGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigGlobalResponse, error) {
	rsp, err := c.GetApiConfigGlobal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiConfigGlobalResponse(rsp)
}

// PostApiConfigGlobalWithBodyWithResponse request with arbitrary body returning *PostApiConfigGlobalResponse
func (c *ClientWithResponses) PostApiConfigGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error) {
	rsp, err := c.PostApiConfigGlobalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiConfigGlobalResponse(rsp)
}

func (c *ClientWithResponses) PostApiConfigGlobalWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiConfigGlobalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error) {
	rsp, err := c.PostApiConfigGlobalWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiConfigGlobalResponse(rsp)
}

func (c *ClientWithResponses) PostApiConfigGlobalWithResponse(ctx context.Context, body PostApiConfigGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error) {
	rsp, err := c.PostApiConfigGlobal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiConfigGlobalResponse(rsp)
}

func (c *ClientWithResponses) PostApiConfigGlobalWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApiConfigGlobalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiConfigGlobalResponse, error) {
	rsp, err := c.PostApiConfigGlobalWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiConfigGlobalResponse(rsp)
}

// FileGetFilesWithResponse request returning *FileGetFilesResponse
func (c *ClientWithResponses) FileGetFilesWithResponse(ctx context.Context, params *FileGetFilesParams, reqEditors ...RequestEditorFn) (*FileGetFilesResponse, error) {
	rsp, err := c.FileGetFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileGetFilesResponse(rsp)
}

// GetApiLogFetchWithResponse request returning *GetApiLogFetchResponse
func (c *ClientWithResponses) GetApiLogFetchWithResponse(ctx context.Context, params *GetApiLogFetchParams, reqEditors ...RequestEditorFn) (*GetApiLogFetchResponse, error) {
	rsp, err := c.GetApiLogFetch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLogFetchResponse(rsp)
}

// PostApiMiscGeneratefilenameWithBodyWithResponse request with arbitrary body returning *PostApiMiscGeneratefilenameResponse
func (c *ClientWithResponses) PostApiMiscGeneratefilenameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error) {
	rsp, err := c.PostApiMiscGeneratefilenameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMiscGeneratefilenameResponse(rsp)
}

func (c *ClientWithResponses) PostApiMiscGeneratefilenameWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error) {
	rsp, err := c.PostApiMiscGeneratefilenameWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMiscGeneratefilenameResponse(rsp)
}

func (c *ClientWithResponses) PostApiMiscGeneratefilenameWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error) {
	rsp, err := c.PostApiMiscGeneratefilename(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMiscGeneratefilenameResponse(rsp)
}

func (c *ClientWithResponses) PostApiMiscGeneratefilenameWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApiMiscGeneratefilenameApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMiscGeneratefilenameResponse, error) {
	rsp, err := c.PostApiMiscGeneratefilenameWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMiscGeneratefilenameResponse(rsp)
}

// RoomGetRoomsWithResponse request returning *RoomGetRoomsResponse
func (c *ClientWithResponses) RoomGetRoomsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RoomGetRoomsResponse, error) {
	rsp, err := c.RoomGetRooms(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoomGetRoomsResponse(rsp)
}

// RoomCreateRoomWithBodyWithResponse request with arbitrary body returning *RoomCreateRoomResponse
func (c *ClientWithResponses) RoomCreateRoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error) {
	rsp, err := c.RoomCreateRoomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoomCreateRoomResponse(rsp)
}

func (c *ClientWithResponses) RoomCreateRoomWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body RoomCreateRoomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error) {
	rsp, err := c.RoomCreateRoomWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoomCreateRoomResponse(rsp)
}

func (c *ClientWithResponses) RoomCreateRoomWithResponse(ctx context.Context, body RoomCreateRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error) {
	rsp, err := c.RoomCreateRoom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoomCreateRoomResponse(rsp)
}

func (c *ClientWithResponses) RoomCreateRoomWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body RoomCreateRoomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*RoomCreateRoomResponse, error) {
	rsp, err := c.RoomCreateRoomWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoomCreateRoomResponse(rsp)
}

// DeleteApiRoomObjectIdWithResponse request returning *DeleteApiRoomObjectIdResponse
func (c *ClientWithResponses) DeleteApiRoomObjectIdWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiRoomObjectIdResponse, error) {
	rsp, err := c.DeleteApiRoomObjectId(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRoomObjectIdResponse(rsp)
}

// GetApiRoomObjectIdWithResponse request returning *GetApiRoomObjectIdResponse
func (c *ClientWithResponses) GetApiRoomObjectIdWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdResponse, error) {
	rsp, err := c.GetApiRoomObjectId(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomObjectIdResponse(rsp)
}

// GetApiRoomObjectIdConfigWithResponse request returning *GetApiRoomObjectIdConfigResponse
func (c *ClientWithResponses) GetApiRoomObjectIdConfigWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdConfigResponse, error) {
	rsp, err := c.GetApiRoomObjectIdConfig(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomObjectIdConfigResponse(rsp)
}

// PostApiRoomObjectIdConfigWithBodyWithResponse request with arbitrary body returning *PostApiRoomObjectIdConfigResponse
func (c *ClientWithResponses) PostApiRoomObjectIdConfigWithBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error) {
	rsp, err := c.PostApiRoomObjectIdConfigWithBody(ctx, objectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomObjectIdConfigWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error) {
	rsp, err := c.PostApiRoomObjectIdConfigWithApplicationWildcardPlusJSONBody(ctx, objectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomObjectIdConfigWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error) {
	rsp, err := c.PostApiRoomObjectIdConfig(ctx, objectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomObjectIdConfigWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, objectId openapi_types.UUID, body PostApiRoomObjectIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdConfigResponse, error) {
	rsp, err := c.PostApiRoomObjectIdConfigWithApplicationJSONPatchPlusJSONBody(ctx, objectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdConfigResponse(rsp)
}

// GetApiRoomObjectIdIostatsWithResponse request returning *GetApiRoomObjectIdIostatsResponse
func (c *ClientWithResponses) GetApiRoomObjectIdIostatsWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdIostatsResponse, error) {
	rsp, err := c.GetApiRoomObjectIdIostats(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomObjectIdIostatsResponse(rsp)
}

// PostApiRoomObjectIdRefreshWithResponse request returning *PostApiRoomObjectIdRefreshResponse
func (c *ClientWithResponses) PostApiRoomObjectIdRefreshWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdRefreshResponse, error) {
	rsp, err := c.PostApiRoomObjectIdRefresh(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdRefreshResponse(rsp)
}

// PostApiRoomObjectIdSplitWithResponse request returning *PostApiRoomObjectIdSplitResponse
func (c *ClientWithResponses) PostApiRoomObjectIdSplitWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdSplitResponse, error) {
	rsp, err := c.PostApiRoomObjectIdSplit(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdSplitResponse(rsp)
}

// PostApiRoomObjectIdStartWithResponse request returning *PostApiRoomObjectIdStartResponse
func (c *ClientWithResponses) PostApiRoomObjectIdStartWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdStartResponse, error) {
	rsp, err := c.PostApiRoomObjectIdStart(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdStartResponse(rsp)
}

// GetApiRoomObjectIdStatsWithResponse request returning *GetApiRoomObjectIdStatsResponse
func (c *ClientWithResponses) GetApiRoomObjectIdStatsWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiRoomObjectIdStatsResponse, error) {
	rsp, err := c.GetApiRoomObjectIdStats(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomObjectIdStatsResponse(rsp)
}

// PostApiRoomObjectIdStopWithResponse request returning *PostApiRoomObjectIdStopResponse
func (c *ClientWithResponses) PostApiRoomObjectIdStopWithResponse(ctx context.Context, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiRoomObjectIdStopResponse, error) {
	rsp, err := c.PostApiRoomObjectIdStop(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomObjectIdStopResponse(rsp)
}

// DeleteApiRoomRoomIdWithResponse request returning *DeleteApiRoomRoomIdResponse
func (c *ClientWithResponses) DeleteApiRoomRoomIdWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*DeleteApiRoomRoomIdResponse, error) {
	rsp, err := c.DeleteApiRoomRoomId(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRoomRoomIdResponse(rsp)
}

// GetApiRoomRoomIdWithResponse request returning *GetApiRoomRoomIdResponse
func (c *ClientWithResponses) GetApiRoomRoomIdWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdResponse, error) {
	rsp, err := c.GetApiRoomRoomId(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomRoomIdResponse(rsp)
}

// GetApiRoomRoomIdConfigWithResponse request returning *GetApiRoomRoomIdConfigResponse
func (c *ClientWithResponses) GetApiRoomRoomIdConfigWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdConfigResponse, error) {
	rsp, err := c.GetApiRoomRoomIdConfig(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomRoomIdConfigResponse(rsp)
}

// PostApiRoomRoomIdConfigWithBodyWithResponse request with arbitrary body returning *PostApiRoomRoomIdConfigResponse
func (c *ClientWithResponses) PostApiRoomRoomIdConfigWithBodyWithResponse(ctx context.Context, roomId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error) {
	rsp, err := c.PostApiRoomRoomIdConfigWithBody(ctx, roomId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomRoomIdConfigWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error) {
	rsp, err := c.PostApiRoomRoomIdConfigWithApplicationWildcardPlusJSONBody(ctx, roomId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomRoomIdConfigWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error) {
	rsp, err := c.PostApiRoomRoomIdConfig(ctx, roomId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoomRoomIdConfigWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, roomId int32, body PostApiRoomRoomIdConfigApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdConfigResponse, error) {
	rsp, err := c.PostApiRoomRoomIdConfigWithApplicationJSONPatchPlusJSONBody(ctx, roomId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdConfigResponse(rsp)
}

// GetApiRoomRoomIdIostatsWithResponse request returning *GetApiRoomRoomIdIostatsResponse
func (c *ClientWithResponses) GetApiRoomRoomIdIostatsWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdIostatsResponse, error) {
	rsp, err := c.GetApiRoomRoomIdIostats(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomRoomIdIostatsResponse(rsp)
}

// PostApiRoomRoomIdRefreshWithResponse request returning *PostApiRoomRoomIdRefreshResponse
func (c *ClientWithResponses) PostApiRoomRoomIdRefreshWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdRefreshResponse, error) {
	rsp, err := c.PostApiRoomRoomIdRefresh(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdRefreshResponse(rsp)
}

// PostApiRoomRoomIdSplitWithResponse request returning *PostApiRoomRoomIdSplitResponse
func (c *ClientWithResponses) PostApiRoomRoomIdSplitWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdSplitResponse, error) {
	rsp, err := c.PostApiRoomRoomIdSplit(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdSplitResponse(rsp)
}

// PostApiRoomRoomIdStartWithResponse request returning *PostApiRoomRoomIdStartResponse
func (c *ClientWithResponses) PostApiRoomRoomIdStartWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdStartResponse, error) {
	rsp, err := c.PostApiRoomRoomIdStart(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdStartResponse(rsp)
}

// GetApiRoomRoomIdStatsWithResponse request returning *GetApiRoomRoomIdStatsResponse
func (c *ClientWithResponses) GetApiRoomRoomIdStatsWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*GetApiRoomRoomIdStatsResponse, error) {
	rsp, err := c.GetApiRoomRoomIdStats(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoomRoomIdStatsResponse(rsp)
}

// PostApiRoomRoomIdStopWithResponse request returning *PostApiRoomRoomIdStopResponse
func (c *ClientWithResponses) PostApiRoomRoomIdStopWithResponse(ctx context.Context, roomId int32, reqEditors ...RequestEditorFn) (*PostApiRoomRoomIdStopResponse, error) {
	rsp, err := c.PostApiRoomRoomIdStop(ctx, roomId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoomRoomIdStopResponse(rsp)
}

// VersionGetVersionWithResponse request returning *VersionGetVersionResponse
func (c *ClientWithResponses) VersionGetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionGetVersionResponse, error) {
	rsp, err := c.VersionGetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionGetVersionResponse(rsp)
}

// ParseGetApiConfigDefaultResponse parses an HTTP response from a GetApiConfigDefaultWithResponse call
func ParseGetApiConfigDefaultResponse(rsp *http.Response) (*GetApiConfigDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiConfigDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiConfigGlobalResponse parses an HTTP response from a GetApiConfigGlobalWithResponse call
func ParseGetApiConfigGlobalResponse(rsp *http.Response) (*GetApiConfigGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiConfigGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiConfigGlobalResponse parses an HTTP response from a PostApiConfigGlobalWithResponse call
func ParsePostApiConfigGlobalResponse(rsp *http.Response) (*PostApiConfigGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiConfigGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseFileGetFilesResponse parses an HTTP response from a FileGetFilesWithResponse call
func ParseFileGetFilesResponse(rsp *http.Response) (*FileGetFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileGetFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileApiResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiLogFetchResponse parses an HTTP response from a GetApiLogFetchWithResponse call
func ParseGetApiLogFetchResponse(rsp *http.Response) (*GetApiLogFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLogFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JsonLogDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiMiscGeneratefilenameResponse parses an HTTP response from a PostApiMiscGeneratefilenameWithResponse call
func ParsePostApiMiscGeneratefilenameResponse(rsp *http.Response) (*PostApiMiscGeneratefilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMiscGeneratefilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileNameTemplateOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseRoomGetRoomsResponse parses an HTTP response from a RoomGetRoomsWithResponse call
func ParseRoomGetRoomsResponse(rsp *http.Response) (*RoomGetRoomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoomGetRoomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseRoomCreateRoomResponse parses an HTTP response from a RoomCreateRoomWithResponse call
func ParseRoomCreateRoomResponse(rsp *http.Response) (*RoomCreateRoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoomCreateRoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiRoomObjectIdResponse parses an HTTP response from a DeleteApiRoomObjectIdWithResponse call
func ParseDeleteApiRoomObjectIdResponse(rsp *http.Response) (*DeleteApiRoomObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRoomObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomObjectIdResponse parses an HTTP response from a GetApiRoomObjectIdWithResponse call
func ParseGetApiRoomObjectIdResponse(rsp *http.Response) (*GetApiRoomObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomObjectIdConfigResponse parses an HTTP response from a GetApiRoomObjectIdConfigWithResponse call
func ParseGetApiRoomObjectIdConfigResponse(rsp *http.Response) (*GetApiRoomObjectIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomObjectIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomObjectIdConfigResponse parses an HTTP response from a PostApiRoomObjectIdConfigWithResponse call
func ParsePostApiRoomObjectIdConfigResponse(rsp *http.Response) (*PostApiRoomObjectIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomObjectIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomObjectIdIostatsResponse parses an HTTP response from a GetApiRoomObjectIdIostatsWithResponse call
func ParseGetApiRoomObjectIdIostatsResponse(rsp *http.Response) (*GetApiRoomObjectIdIostatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomObjectIdIostatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomIOStatsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomObjectIdRefreshResponse parses an HTTP response from a PostApiRoomObjectIdRefreshWithResponse call
func ParsePostApiRoomObjectIdRefreshResponse(rsp *http.Response) (*PostApiRoomObjectIdRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomObjectIdRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomObjectIdSplitResponse parses an HTTP response from a PostApiRoomObjectIdSplitWithResponse call
func ParsePostApiRoomObjectIdSplitResponse(rsp *http.Response) (*PostApiRoomObjectIdSplitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomObjectIdSplitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomObjectIdStartResponse parses an HTTP response from a PostApiRoomObjectIdStartWithResponse call
func ParsePostApiRoomObjectIdStartResponse(rsp *http.Response) (*PostApiRoomObjectIdStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomObjectIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomObjectIdStatsResponse parses an HTTP response from a GetApiRoomObjectIdStatsWithResponse call
func ParseGetApiRoomObjectIdStatsResponse(rsp *http.Response) (*GetApiRoomObjectIdStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomObjectIdStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomRecordingStatsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomObjectIdStopResponse parses an HTTP response from a PostApiRoomObjectIdStopWithResponse call
func ParsePostApiRoomObjectIdStopResponse(rsp *http.Response) (*PostApiRoomObjectIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomObjectIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiRoomRoomIdResponse parses an HTTP response from a DeleteApiRoomRoomIdWithResponse call
func ParseDeleteApiRoomRoomIdResponse(rsp *http.Response) (*DeleteApiRoomRoomIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRoomRoomIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomRoomIdResponse parses an HTTP response from a GetApiRoomRoomIdWithResponse call
func ParseGetApiRoomRoomIdResponse(rsp *http.Response) (*GetApiRoomRoomIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomRoomIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomRoomIdConfigResponse parses an HTTP response from a GetApiRoomRoomIdConfigWithResponse call
func ParseGetApiRoomRoomIdConfigResponse(rsp *http.Response) (*GetApiRoomRoomIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomRoomIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomRoomIdConfigResponse parses an HTTP response from a PostApiRoomRoomIdConfigWithResponse call
func ParsePostApiRoomRoomIdConfigResponse(rsp *http.Response) (*PostApiRoomRoomIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomRoomIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomRoomIdIostatsResponse parses an HTTP response from a GetApiRoomRoomIdIostatsWithResponse call
func ParseGetApiRoomRoomIdIostatsResponse(rsp *http.Response) (*GetApiRoomRoomIdIostatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomRoomIdIostatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomIOStatsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomRoomIdRefreshResponse parses an HTTP response from a PostApiRoomRoomIdRefreshWithResponse call
func ParsePostApiRoomRoomIdRefreshResponse(rsp *http.Response) (*PostApiRoomRoomIdRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomRoomIdRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomRoomIdSplitResponse parses an HTTP response from a PostApiRoomRoomIdSplitWithResponse call
func ParsePostApiRoomRoomIdSplitResponse(rsp *http.Response) (*PostApiRoomRoomIdSplitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomRoomIdSplitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomRoomIdStartResponse parses an HTTP response from a PostApiRoomRoomIdStartWithResponse call
func ParsePostApiRoomRoomIdStartResponse(rsp *http.Response) (*PostApiRoomRoomIdStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomRoomIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiRoomRoomIdStatsResponse parses an HTTP response from a GetApiRoomRoomIdStatsWithResponse call
func ParseGetApiRoomRoomIdStatsResponse(rsp *http.Response) (*GetApiRoomRoomIdStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoomRoomIdStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomRecordingStatsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiRoomRoomIdStopResponse parses an HTTP response from a PostApiRoomRoomIdStopWithResponse call
func ParsePostApiRoomRoomIdStopResponse(rsp *http.Response) (*PostApiRoomRoomIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoomRoomIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoomDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseVersionGetVersionResponse parses an HTTP response from a VersionGetVersionWithResponse call
func ParseVersionGetVersionResponse(rsp *http.Response) (*VersionGetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionGetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecorderVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
